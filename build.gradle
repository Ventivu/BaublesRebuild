buildscript {
    repositories {
        maven {
            name = "aliyun"
            url "https://maven.aliyun.com/repository/public/"
        }
        maven { url = "https://cyankoton.github.io/maven" }
        mavenCentral()
        maven {
            name = "forge"
            //url = "https://files.minecraftforge.net/maven"
            url = "https://maven.minecraftforge.net"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath("io.github.cyankoton:ForgeGradle:1.2-1.0.8") {
            changing = true
        }
    }
}

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'forge'
apply plugin: 'curseforge'
sourceCompatibility = targetCompatibility = '1.8'


mirrorstation {
    // cyankoton
    mcJsonUrl = "https://s3.amazonaws.com/Minecraft.Download/versions/{MC_VERSION}/{MC_VERSION}.json"
    mcJarUrl = "https://cyankoton.github.io/maven/minecraft/versions/{MC_VERSION}/{MC_VERSION}.jar"
    mcServerUrl = "https://cyankoton.github.io/maven/minecraft/versions/{MC_VERSION}/minecraft_server.{MC_VERSION}.jar"
    mcpUrl = "https://files.minecraftforge.net/fernflower-fix-1.0.zip"
    assetsUrl = "https://resources.download.minecraft.net"
    libraryUrl = "https://libraries.minecraft.net/"
    assetsIndexUrl = "https://s3.amazonaws.com/Minecraft.Download/indexes/{ASSET_INDEX}.json"
    forgeMavenUrl = "https://maven.minecraftforge.net"
    // mirror
    mirrorMavenUrl = "https://cyankoton.github.io/maven"
    aliyunMavenUrl = "https://maven.aliyun.com/repository/public"
    mavenMavenUrl = "https://repo1.maven.org/maven2"
}

group = "Ventivu.baubles"
archivesBaseName = ModName
version = ModVersion

repositories {
    mavenLocal()
    mavenCentral()
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
    replaceIn ContainerClass
    replace "@ModVersion@", ModVersion
    replace "@ModName@", ModName
    replace "@ModID@", ModID
    replace "@CoreVersion@", MinCoreVer
    if (GuiFactory == "") println "我木得配置"
    replace "@ModFactory@", GuiFactory
    //mappings = "stable_12"
}

dependencies {
    implementation 'org.jetbrains:annotations-java5:20.1.0'
    implementation 'Ventivu:MagCore:latest.release:dev'
    api 'Ventivu:CustomStuff:latest.release:api'
    implementation fileTree("Mods")
    runtimeOnly fileTree("runtime")
}


processResources {
    inputs.property "version", ModVersion
    inputs.property "mcversion", project.minecraft.version
    inputs.property "modID", ModID
    inputs.property "modName", ModName
    inputs.property "desc", ModDescription

    filesMatching('mcmod.info') {
        expand 'version': ModVersion,
                'mcversion': project.minecraft.version,
                'modID': ModID,
                'modName': ModName,
                'desc': ModDescription
    }

    exclude('assets/baubles/textures/gui/*.psd')
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

tasks.register('buildJar', Jar) {
    classifier("dev")
    archiveName(archivesBaseName + "Dev.jar")
    from sourceSets.main.output
}

// 这将此任务创建一个.jar文件，其中包含此 MOD 的源代码
tasks.register('sourcesJar', Jar) {
    dependsOn classes
    classifier("sources")
    from sourceSets.main.allSource
}


// 在构建 MOD 时候，创建列出的工件
artifacts {
    archives sourcesJar
    archives buildJar
}

runClient {
    args("--username", "Ventivu")
    if (hasTransformer) args("-Dfml.coreMods.load=" + TransFormerFile)
}

runServer {
    if (hasTransformer) args("-Dfml.coreMods.load=" + TransFormerFile)
}

jar {
    def manifestAttributes = [:]
    manifestAttributes += ["FMLCorePluginContainsFMLMod": true]
    manifestAttributes += ["FMLCorePlugin": TransFormerFile]
    manifest {
        if (hasTransformer) attributes(manifestAttributes)
    }
}
//---------------------------------------------------------------------------------------------
